import numpy as np
import torch
def main1():
    epoch=[i for i in range(40)]
    print(epoch)
    for i in epoch:
        # print(i)
        # a = 1/(i+2)
        # # print(a)
        # a =round(a,3)
        # # print(a)
        # print(a,1-a)
        # a = 1 - np.exp(-i)
        # b = 1 - a
        a = 1 - (i / 40)
        a =round(a,3)
        b = 2 - a
        print(a,b)
        # 1.0 1.0
        # 0.975 1.025
        # 0.95 1.05
        # 0.925 1.075
        # 0.9 1.1
        # 0.875 1.125
        # 0.85 1.15
        # 0.825 1.175
        # 0.8 1.2
        # 0.775 1.225
        # 0.75 1.25
        # 0.725 1.275
        # 0.7 1.3
        # 0.675 1.325
        # 0.65 1.35
        # 0.625 1.375
        # 0.6 1.4
        # 0.575 1.425
        # 0.55 1.45
        # 0.525 1.475
        # 0.5 1.5
        # 0.475 1.525
        # 0.45 1.55
        # 0.425 1.575
        # 0.4 1.6
        # 0.375 1.625
        # 0.35 1.65
        # 0.325 1.675
        # 0.3 1.7
        # 0.275 1.725
        # 0.25 1.75
        # 0.225 1.775
        # 0.2 1.8
        # 0.175 1.825
        # 0.15 1.85
        # 0.125 1.875
        # 0.1 1.9
        # 0.075 1.925
        # 0.05 1.95
        # 0.025 1.975
def main():
    a = torch.tensor([[[1, 1, 1],[2, 2, 2]],
                     [[3,3,3],[4,4,4]]])
    print(a.shape)# torch.Size([2, 2, 3]) 2通道，宽，高
    print(a.max(0))# max返回值有两个，一个是最大值，另一个是坐标。对于二维张量来说，max(0)表示返回每列的最大值以及其列坐标，max(1)表示返回每行的最大值及其行坐标
    # 三维的 dim=0,第0维上的最大值，[(000,100),(001,101),(002,102)],[(010,110),(011,111),(012,112)]--[(1,3),(1,3),(1,3)],[(2,4),(2,4),(2,4)]

    # values=tensor([[3, 3, 3],
    #         [4, 4, 4]]),
    # indices=tensor([[1, 1, 1],
    #         [1, 1, 1]]))

    print(a.max(2))
    # 三维中dim=2，第三维上的最大值，[(000,001,002),(010,011,012)],[(100,101,102),(110,111,112)]
    b,c =a.max(2)
    print(b.shape)# torch.Size([2, 2])
    # values=tensor([[1, 2],
    #         [3, 4]]),
    # indices=tensor([[0, 0],
    #         [0, 0]]))


if __name__ == '__main__':
    main()